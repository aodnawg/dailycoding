{"meta":{"day":null,"tag":null,"title":null},"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 1000\n#define MAX_DIST 10000.\n#define MIN_SURF .00001\n#define PI 3.141593\n\nfloat random(float n) {\n    return fract(sin(n*217.12312)*398.2121561);\n}\n\nfloat random(vec2 p) {\n    return fract(\n        sin(dot(p, vec2(98.108171, 49.10821)))*81.20914\n    );\n}\n\nfloat random(vec3 p) {\n    return random(random(p.xy) + p.z);\n}\n\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\nvec2 rhash(vec2 uv) {\n  uv *= myt;\n  uv *= mys;\n  return fract(fract(uv / mys) * uv);\n}\n\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      43758.5453);\n}\n\nvec3 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return vec3(sqrt(res), abs(id));\n}\n\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * voronoi3d(x).x;\n\t\tx = x * 2. + shift;\n\t\ta *= 0.5555;\n\t}\n\treturn v;\n}\n\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    \n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    \n    return c;\n}\n\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n    \n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}\n\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p)-r;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI*2. / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\nfloat sdGround(vec3 p) {\n    float n = fbm(p)*3.5;\n\n    // p.xy *= rot(p.z)*.01;\n    n *= pow(abs(p.x*.5),5.) * .5;\n    // p.z += sin(p.z);\n    return p.y+1.-n;\n\n    vec4 hoge = HexCoords(p.xz*.2);\n    float f = fbm(p*1.);\n    float g = p.y+50.;\n    g += (sin(random(hoge.zw)+iTime)+1.)*.5;\n    return g;\n}\n\nfloat map(vec3 p, vec3 ro) {\n    float glitch = step(.9, random(floor(iTime*10.)))*noise(p)*1.;\n\n    vec3 lp = p;\n    lp.y -= iTime;\n    // lp.xy *= rot(glitch)*10.;\n    vec2 hoge = fract(lp.yz*.5)-.5 + glitch;\n    float l = length(hoge)+.01 +sin(iTime)*.01*glitch;\n    vec3 gp = p;\n    gp*=1.+noise(p*2.)*.5;\n    // gp.xz *= 1.+glitch*5.;\n    float g_ = sdGround(gp)*.5;\n    return min(l, g_);\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p, ro);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./200.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    float n = noise(vec3(1.,1.,s));\n    vec3 ro = vec3(0, 0.1+sin(iTime*.2)*.5, 1.+s*1.);\n    // ro = vec3(0, 0., 1.);\n    // ro += +vec3(0.,0.,s);\n    vec3 lookat = ro + vec3(0.,sin(iTime*.1)*.1,1.);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = .4;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\n\n\nvoid main() {\n    vec3 col = vec3(0.);\n    vec2 uv = (gl_FragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    float s = iTime;\n    Camera c = makeCam(uv, s);\n    Trace t = trace(c.ro, c.rd);\n    float w = mix(.01,.02, sin(iTime)*.5+.5)*2.;\n    col = vec3(pow(t.s,1.)*(1.+t.d*w));\n\n \n\n    gl_FragColor = vec4(col, 1.);\n}"}