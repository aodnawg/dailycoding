{"meta":{"day":null,"tag":null,"title":null},"body":"precision highp float;\n\nuniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define MIN_SURF 0.0001\n#define MAX_DIST 300.\n#define MAX_LOOP 1000\n#define PI 3.141593\n\nmat2 rot(float a) {\n  return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat random(float n) {\n    return fract(sin(n*318.154121)*31.134131);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvec3 makeRay(in vec3 ro, in vec3 lookat, in vec2 uv) {\n  float z = .6;\n  vec3 f = normalize(lookat-ro);\n  vec3 r = cross(vec3(0,1,0), f);\n  vec3 u = cross(f, r);\n  vec3 c = ro+f*z;\n  vec3 i = c+r*uv.x+u*uv.y;\n  vec3 rd = normalize(i-ro);\n  return rd;\n}\n\nfloat smin( float a, float b, float k ){\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI*2. / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\nfloat sdThread(in vec3 p, in float seed) {\n  float no = noise(p*.5+vec3(time+seed*12.));\n  p.xz += no*1.6;\n  p.xz *= rot(p.y*no+time);\n  float th = length(p.xz)-.2;\n  return th;\n}\n\nfloat map(vec3 p) {\n  float no = noise(vec3(p.y*.2+time,1.,1.));\n  float seed=0.;\n  p.xz *= rot(p.y*.2);\n  p.xz *= rot(no*4.);\n  p.z -= 1.+no*4.;\n  p.xz *= rot(p.y);\n  float r = sdThread(p, random(12.12));\n  for(int i=0; i<=4; i++) {\n    seed += 1.;\n    p.x *= 1.4 + 1.;\n    p.xz *= rot(2.);\n    r = smin(r, sdThread(p, random(seed)), 1.2);\n  }\n  return r/10.;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)) - map(p + vec3( -d, 0.0, 0.0)),\n        map(p + vec3(0.0,   d, 0.0)) - map(p + vec3(0.0,  -d, 0.0)),\n        map(p + vec3(0.0, 0.0,   d)) - map(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main(void) {\n  vec2 uv = (gl_FragCoord.xy-.5*resolution.xy)/resolution.y;\n  float s = time*3.;\n  vec3 ro = vec3(10.,15.,-10.);\n  ro *= vec3(sin(time*.3), 1., cos(time*.1));\n  vec3 lookat = vec3(0);\n\n  // initialize\n  vec3 rd = makeRay(ro, lookat, uv);\n  vec3 col = vec3(0.);\n  float t = 0., stp=0.;\n  vec3 p;\n\n  // ray march\n  for(int i = 0; i <= MAX_LOOP; i++) {\n    p = ro+rd*t;\n    float d = map(p);\n    if(d>MAX_DIST) break;\n    if(d<MIN_SURF) {\n      vec3 n = getNormal(p);\n      n*=.5;\n      n+=.5;\n      col = vec3(1.);\n      col -= vec3(1.-n.y*.2);\n      break;\n    }\n    t += d;\n    stp+=1.;\n  }\n\n  float m = stp/250.;\n  m = pow(m, 1.2);\n  col = vec3(m);\n  float fog = pow(t/60., 4.);\n  col = mix(1.-col, vec3(1.), min(1., max(0., fog)));\n\n  gl_FragColor = vec4(col, 1.);\n}"}