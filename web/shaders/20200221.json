{"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define PI 3.141593\n\nprecision highp float;\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\nfloat random(float n) {\n    return fract(sin(n*318.154121)*31.134131);\n}\n\nvec2 rhash(vec2 uv) {\n  uv *= myt;\n  uv *= mys;\n  return fract(fract(uv / mys) * uv);\n}\n\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      43758.5453);\n}\n\nvec3 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return vec3(sqrt(res), abs(id));\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 5; ++i) {\n\t\tv += a * voronoi3d(x).x;\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid makeRoRd(in vec2 uv, out vec3 ro, out vec3 rd) {\n    ro = vec3(0,0,-5);\n    // vec2 mou = (iMouse.xy/iResolution.xy-.5) * 10.;\n    vec3 lookat = vec3(0,0,0);\n    vec3 f = normalize(lookat-ro);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    vec3 i = c + uv.x * r + uv.y * u;\n    rd = normalize(i-ro);\n}\n\nmat2 rot (float a) {\n    return mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n    );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdNoise(vec3 p) {\n    float wave = sin(iTime)*.05;\n    float d2 = fbm(vec3(p.x+iTime*2., p.yz))-.15 + wave;\n    float r = .5;\n    return length(d2)-r;\n}\n\nfloat getDist(in vec3 p) {\n    p.y += iTime*.1;\n    p.xz *= rot(iTime*.1);\n    // p.yz *= rot(iTime*.3);\n    p.xz *= rot(p.y+iTime);\n    // p.yz *= rot(iTime*.1);\n    // vec3 nP = p * p.y;\n    float n = sdNoise((p+vec3(iTime*.1,0.,0.)));\n    float tick = .5 + (sin(iTime)+1.);\n    float mask = max(\n        -sdBox(p, vec3(1.,1000.,1.)),\n        sdBox(p, vec3(1.+tick,1000.,1.+tick))\n    );\n    float d = max(-n, mask);\n    return d;\n}\n\nvoid march(\n    out vec3 hitPos,\n    out float step,\n    out vec3 col_,\n    in vec3 ro,\n    in vec3 rd\n) {\n    float t=0.;\n    for(int i=0; i<=3500; i++) {\n        vec3 p = ro+rd*t;\n        float dS = getDist(p);\n        // dS = max(0.0002, abs(dS));\n        if(dS<0.00001) {\n            hitPos = p;\n            col_ = vec3(1.,.5,.01);\n            break;\n        }\n        if(t>1000.) {\n            hitPos = vec3(100000.);\n            col_ = vec3(0.);\n            break;\n        };\n        t += dS;\n        step += 1./150.;\n    }\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = getDist(p);\n    vec2 e = vec2(.00001, 0);\n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\nvoid main()\n{\n    vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n\n    vec3 ro,rd;\n    makeRoRd(uv, ro, rd);\n\n    float t=0., step_=0.;\n    vec3 hitPos, col_;\n    march(hitPos, step_, col_, ro, rd);\n\n    float light = pow(step_, 1.8 + sin(iTime)*1.);\n    float m = dot(vec3(0,5,0), GetNormal(hitPos));\n    float cnd = step(.5, random(floor(iTime*5.)));\n    if ( cnd > .5) {\n        col += vec3(m)*.01;\n    }\n    \n    col += vec3(1.)*light*4.;\n\n    gl_FragColor = vec4(col,1.0);\n}"}