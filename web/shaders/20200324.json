{"body":"precision highp float;\n\nuniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define MIN_SURF 0.00001\n#define MAX_DIST 100.\n#define MAX_LOOP 1000\n#define PI 3.1415926536\n\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\n\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat random(float n) {\n  return fract(sin(n*78.39817)*12.09834);\n}\nfloat random(vec2 p) {\n  return fract(dot(p,vec2(21.41210, 98.14194))*10.12912)*87.21081;\n}\n\nmat2 rot(float a) {\n  return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nvec3 sky(vec3 rd) {\n  float n = max(0., rd.y);\n  n += .5;\n  return mix(vec3(.43, .65, .89), vec3(.8+sin(iTime*.3)*.1, .85, .93), n);\n}\n\nfloat spc(vec3 ray, vec3 normal, vec3 lightDir) {\n\tvec3 r = reflect(-lightDir, normal);\n\treturn pow(max(dot(r, -ray), 0.0), 1.0);\n}\n\nfloat sdGyroid(in vec3 p) {\n  p.xz *= rot(p.y*.4);\n  p.y += iTime;\n\tfloat g = dot(sin(p*1.115), cos(p.zyx*1.12));\n\treturn g/5.;\n}\n\nfloat sdSea(in vec3 p) {\n  p.y += noise(vec3(p.xy, p.z+iTime*2.))*.2;\n  return p.y+1.;\n}\n\nfloat sdSphere(in vec3 p, in bool glass) {\n  p.y -= 7.;\n  float s = length(p)-7.;\n  float g = sdGyroid(p);\n  if (glass) g *= -1.;\n  s = max(s, g);\n  return s;\n}\n\nvec3 getSphereNormal(in vec3 p, in bool glass) {\n\tfloat d = sdSphere(p, glass);\n  vec2 e = vec2(.001, 0);\n  vec3 n = d - vec3(sdSphere(p-e.xyy, glass), sdSphere(p-e.yxy, glass), sdSphere(p-e.yyx, glass));\n  return normalize(n);\n}\n\nfloat traceSphere(\n  in vec3 ro,\n  in vec3 rd,\n  out bool isHit,\n  out float occ,\n  in bool glass) {\n  float t = 0.;\n  occ = 0.;\n  isHit = false;\n  for(int i = 0; i< MAX_LOOP; i++) {\n    vec3 p = ro+rd*t;\n    float d = sdSphere(p, glass);\n    if(d < MIN_SURF) {\n      isHit = true;\n      break;\n    }\n    if(d > MAX_DIST) break;\n    t += d;\n    occ += 1.;\n  }\n  occ /= 100.;\n  occ = min(1., pow(occ, 1.));\n  return t;\n}\n\nvec3 makeSphereColor(in vec3 ray, in vec3 n) {\n  vec3 albd = vec3(1.);\n  vec3 lg = vec3(cos(iTime),1,sin(iTime));\n  float sp = spc(ray, n, lg);\n  vec3 dif = vec3(.43,.48,.78)*(1.-n.y);\n  dif += vec3(.98,.8,.38)*(1.-n.z);\n  return albd - dif*.1 + sky(ray)*sp;\n}\n\nvec3 makeSeaColor(in vec3 n, in vec3 eye) {\n  vec3 dif = vec3(.6,.98,.78)*(1.-n.y);\n  return vec3(.92,.95,1.)-dif*2.;\n}\n\nvec3 getSeaNormal(in vec3 p) {\n\tfloat d = sdSea(p);\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        sdSea(p-e.xyy),\n        sdSea(p-e.yxy),\n        sdSea(p-e.yyx));\n    return normalize(n);\n}\n\nfloat traceSea(in vec3 ro, in vec3 rd, out bool isHit) {\n  float t = 0.;\n  isHit = false;\n  for(int i = 0; i<MAX_LOOP; i++) {\n    vec3 p = ro+rd*t;\n    float d = sdSea(p);\n    if(d<MIN_SURF) {\n      isHit = true;\n      break;\n    }\n    if(d>MAX_DIST) break;\n    t += d;\n  }\n  return t;\n}\n\nvec3 makeRay(in vec3 ro, in vec2 uv) {\n  float z = .4;\n  vec3 lookat = vec3(0,4.+sin(iTime*.2)*2.,0);\n  vec3 f = normalize(lookat-ro);\n  vec3 r = cross(vec3(0,1,0), f);\n  vec3 u = cross(f, r);\n  vec3 c = ro+f*z;\n  vec3 i = c+r*uv.x+u*uv.y;\n  vec3 rd = normalize(i-ro);\n  return rd;\n}\n\nvoid main() {\n  vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n  float cs = iTime * .1;\n  vec3 ro = vec3(sin(cs)*12., 1., cos(cs)*12.);\n  vec3 rd = makeRay(ro, uv);\n \n  // initialize\n  bool isHit; vec3 p, n, col; float t, occ;\n  \n  // render sky\n  col = sky(rd);\n\n  // trace glass\n  t = traceSphere(ro, rd, isHit, occ, true);\n  if(isHit){\n    n = getSphereNormal(ro+rd*t, true);\n  }\n  rd = makeRay(ro, uv+n.xy);\n  \n  // tracing sea\n  vec3 seP;\n  t = traceSea(ro, rd, isHit);\n\n  if(isHit) {\n    // render sea\n    seP = ro+rd*t;\n    vec3 seN = getSeaNormal(seP);\n    vec3 eye = normalize(seP - ro);\n    vec3 scl = col;\n    vec3 ld = vec3(0,1,0);\n    p = ro+rd*t+ld*MIN_SURF;\n    bool isHit_;\n    eye = normalize(p-ro);\n    n = getSeaNormal(p);\n\n    // reflection of sphere\n    vec3 r = reflect(eye, n);\n    float t = traceSphere(p, r, isHit_, occ, false);\n    if(isHit_) { \n      p = p+r*t;\n      n = getSphereNormal(p, false);\n      vec3 c = makeSphereColor(normalize(p-ro), n)*.96;\n    } else {\n      col += occ;\n    }\n  }\n\n  // render sphere\n  t = traceSphere(ro, makeRay(ro, uv), isHit, occ, true);\n  if(isHit) {\n    p = ro+rd*t;\n    n = getSphereNormal(p, true);\n    col += makeSphereColor(normalize(p-ro), n)*.05;\n  }\n  col += occ/(20.+sin(iTime)*5.);\n\n  float pw = 1.8;\n  col = vec3(\n    pow(col.r, pw),\n    pow(col.g, pw),\n    pow(col.b, pw)\n  );\n\n  gl_FragColor = vec4(col, 1.);\n}"}