{"meta":{"day":null,"tag":null,"title":null},"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 1000\n#define MAX_DIST 1000.\n#define MIN_SURF .00001\n#define PI 3.141593\n\nfloat random(float n) { return fract(sin(n*217.12312)*398.2121561); }\nfloat random(vec2 p) { return fract(sin(dot(p, vec2(98.108171, 49.10821)))*81.20914); }\nfloat random(vec3 p) { return random(random(p.xy) + p.z); }\n\n//////////////////////////////////////////////////////////////////////////\n// refs. https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2. + shift;\n\t\ta *= 0.5555;\n\t}\n\treturn v;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sdGyroid(in vec3 p, in float z) {\n    return dot(sin(p*3.115*z), cos(p.zyx*3.12*z))/z*3.;\n}\n\nfloat sdNoise(vec3 p) {\n    float z = 3.;\n    float n = fbm(p*z)/z-.15;\n    return n;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdGround(vec3 p) {\n    float r = p.y + noise(p*.1)*8.-4.;\n    return r;\n}\n\nvec3 transform(vec3 p) {\n\tp.xz *= rot(length(p.xz)+sin(iTime*.1)*10.);\n\treturn p;\n}\n\nfloat map(vec3 p) {\n\tp = transform(p);\n\tfloat noise = noise(p);\n    float g = p.y + noise;\n\treturn g;\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd, out vec3 cp) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./100.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    vec3 ro = vec3(0., 10. ,-4.);\n    vec3 lookat = vec3(0.,0.,0.001);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = .7;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)) - map(p + vec3( -d, 0.0, 0.0)),\n        map(p + vec3(0.0,   d, 0.0)) - map(p + vec3(0.0,  -d, 0.0)),\n        map(p + vec3(0.0, 0.0,   d)) - map(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvoid main() {\n    \n    vec2 uv = (gl_FragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(1.);\n    Camera c = makeCam(uv, iTime);\n    vec3 cp;\n    Trace t = trace(c.ro, c.rd, cp);\n    vec3 p =  c.ro+c.rd*t.d;\n    float w = mix(.01,.02, sin(iTime)*.5+.5)*1.;\n    if(t.isHit) {\n        vec3 n = getNormal(p)*.5+.5;\n        n*=.3+sin(iTime)*.1;\n        col = vec3(.5);\n\t\tfloat noise = fbm(transform(p));\n\t\tcol *= 1.+vec3(noise*.05, .1, noise * .1)*4.;\n        // col += dot(n, vec3(cos(1.),sin(2.), 0.))*vec3(.5,.3,.8)*1.;\n        col += dot(n, vec3(0.,cos(iTime*.4)*.1,sin(iTime*.2 + 10.)*.1))*vec3(.2,.3,.8)*1.;\n        // col += dot(n, vec3(0.,cos(iTime*2.+12.54),sin(iTime*3.+19.56)))*vec3(.1,.3,.65)*1.;\n        col -= dot(n, vec3(0,10.,30.))*.05;\n        // if(t.d == sdNoise(p))\n    }\n    col *= 1.+vec3(1.,.87,.76)*t.s*t.d*.02;\n    gl_FragColor = vec4(col, 1.);\n}"}