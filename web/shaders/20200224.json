{"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define MAX_LOOP 1000\n#define MIN_SURF 0.0001\n#define MAX_DIST 10000.\n#define PI 3.141593\n\nprecision highp float;\n\nmat2 rot(float a) {\n    return mat2(\n        cos(a), sin(a), -sin(a), cos(a)\n    );\n}\n\nvec3 getRayDirection(in vec3 ro, in vec3 lookat, in vec2 uv, float z) {\n    vec3 f = normalize(lookat-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 u = cross(f,r);\n    vec3 c = ro+f*z;\n    vec3 i = c+u*uv.y+r*uv.x;\n    return normalize(i-ro);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat hash(vec2 n)\n{\n    return fract(sin(dot(n, vec2(123.0, 458.0))) * 43758.5453);\n}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat sdNoise(vec3 p) {\n    p = floor(p * 4.);\n    float n_ = hash(p.xy * p.z*98.114);\n    float d2 = n_;\n    float r = .5;\n    return length(max(vec2(d2),0.0))-r;\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat sdTotem(vec3 p) {\n    // p.xz  = fract(p.xz * 3.)-.5;\n    vec2 gv = fract(p.xz*.4)-.5;\n    float noise = fbm(vec3(gv, p.y*30.));\n    float m = length(gv);\n    float r = .001;\n    // r *= noise;\n    return length(max(vec2(m),0.0))-r;\n}\n\nfloat getDist (in vec3 p, in float s) {\n    p *= 1. + fbm(p)*sin(s);\n    p.xz *= rot(p.y);\n    float t = sdTotem(p+vec3(0.,0.,iTime));\n    float room = 10.;\n    float b = sdBox(p, vec3(room, 100., room));\n    // float w = p.z-5.\n    return max(t, b);\n}\n\nstruct MarchResult {\n    bool isHit;\n    float d;\n    float blur;\n};\n\nMarchResult march (\n    in vec3 ro,\n    in vec3 rd,\n    in float s\n) {\n    MarchResult result;\n    float t=0.;\n    result.blur = 0.;\n    for (int i=0; i<MAX_LOOP; i++) {\n        vec3 p = ro+t*rd;\n        float d = getDist(p, s);\n        result.blur += 1./50.;\n        d = max(MIN_SURF+0.00001, abs(d));\n        if(d < MIN_SURF ) {\n            result.isHit = true;\n            break;\n        }\n        if(t > MAX_DIST) {\n            result.isHit = false;\n            break;\n        }\n        result.isHit = false;\n        t += d;\n    }\n    \n    result.d = t;\n    return result;\n}\n\nfloat getFrame(in vec2 uv, in float s) {\n    float back = (3. + sin(s*.3)*3.)*.7;\n    vec3 ro = vec3(sin(s*.3)*back, 0., cos(s*.3)*back);\n    vec3 lookat = vec3(0.);\n    float z = .3;\n    vec3 rd = getRayDirection(ro, lookat, uv, z);\n    MarchResult mr = march(ro, rd, s);\n    float m = mr.blur;\n    m = m / 2.5;\n    return pow(m, 1.4);\n}\n\nfloat random(float n) {\n    return fract(sin(n*21.4121)*98.99313);\n}\n\nfloat random(vec2 p) {\n    float n = dot(p, vec2(21.15081, 98.121411));\n    return fract(sin(n*21.4121)*98.99313);\n}\n\nfloat glitchNoise(in vec2 uv) {\n    float n = fbm(vec3(uv*vec2(10., 500.), iTime*20.*random(iTime)));\n    // return random(floor(uv*vec2(.2, 200.)+random(iTime)*10.));\n    return n*.3;\n}\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n\n    float glitch = step(.95, random(floor(iTime*3.)));\n    float d = 0.001 + glitch;\n    uv += glitchNoise(uv)*glitch;\n\n    float m = getFrame(uv, iTime);\n    m = pow(m, 2.2);\n\n    if(\n        step(.95, random(floor(iTime*3.+900.321))) > 0.\n    ) {\n        m = 1.-m;\n    }\n    \n    col = vec3(m);\n    // col = 1.-col;\n\n    gl_FragColor = vec4(col, 1.);\n}"}