{"body":"precision highp float;\n\nuniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define MIN_SURF 0.0001\n#define MAX_DIST 100.\n#define MAX_LOOP 1000\n#define PI 3.141593\n\nmat2 rot(float a) {\n  return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat random(float n) {\n    return fract(sin(n*318.154121)*31.134131);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvec3 makeRay(in vec3 ro, in vec3 lookat, in vec2 uv) {\n  float z = .2;\n  vec3 f = normalize(lookat-ro);\n  vec3 r = cross(vec3(0,1,0), f);\n  vec3 u = cross(f, r);\n  vec3 c = ro+f*z;\n  vec3 i = c+r*uv.x+u*uv.y;\n  vec3 rd = normalize(i-ro);\n  return rd;\n}\n\nfloat grid(vec3 p, float b) {\n  float w = length(p)-15.;\n  float n = noise(p*.5);\n  p.xy *= rot(p.z*.2);\n  // p.xy *= rot(dot(p.y, dot(p.z, p.y))*.1);\n  p.z += time*4.;\n  float z = 4.;\n  p = mod(p, z)-z*.5;\n\n  b = 0.01+n*exp(noise(vec3(time*3.)))*1.*abs(sin(time));\n  float r = length(p.xz)-b;\n  r = min(r, length(p.xy)-b);\n  r = min(r, length(p.yz)-b);\n  r = max(r, w);\n\n  return r;\n}\n\nfloat map(vec3 p) {\n  float r = grid(p, .5);\n\n  float b = .1;\n  for(int i=0; i<=3; i++) {\n    r = min(r, grid(p*(1.+b*5.), .5+b));\n    b += .15;\n  }\n  return r;\n}\n\nvoid main(void) {\n  vec2 uv = (gl_FragCoord.xy-.5*resolution.xy)/resolution.y;\n  float s = time*3.;\n  vec3 ro = vec3(0.,0.,-3);\n  vec3 lookat = vec3(0);\n\n  // initialize\n  vec3 rd = makeRay(ro, lookat, uv);\n  vec3 col = vec3(0.);\n  float t = 0.;\n  vec3 p;\n  vec3 c = vec3(0.), cv = vec3(.43, .32, .56); \n\n  // ray march\n  for(int i = 0; i <= MAX_LOOP; i++) {\n    p = ro+rd*t;\n    float d = map(p);\n    d = max(MIN_SURF+0.001, abs(d));\n    if(t > MAX_DIST) {\n      break;\n    }\n\n    cv = vec3(noise(p), noise(p+10.), noise(p*3.))*vec3(.55,.51, .54);\n    c += cv/max(1., t*4.5);\n    t += d;\n  }\n\n  col = c/2.8;\n  col = pow(col, vec3(2.3,2.1,1.9)*1.2);\n\n  gl_FragColor = vec4(col, 1.);\n}"}