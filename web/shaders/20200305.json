{"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 1000\n#define MAX_DIST 10000.\n#define MIN_SURF .0001\n#define PI 3.141593\n\nfloat random(float n) {\n    return fract(sin(n*217.12312)*398.2121561);\n}\n\nfloat random(vec2 p) {\n    return fract(\n        sin(dot(p, vec2(98.108171, 49.10821)))*81.20914\n    );\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p)-r;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI*2. / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\nfloat sdRing(in vec2 p) {\n    p = pmod(p, 20.);\n    float r_ = -.6;\n    p += vec2(0, r_);\n    float r = 0.2;\n    return sdCircle(p, r);\n}\n\nfloat sdHorn(vec3 p) {\n    float noise = fbm(vec3(p.xz, 1.));\n    float glitch = step(.9, random(floor(iTime*10.)))*noise*15.;\n    p.xz *= .9;\n    p.xz *= rot(iTime);\n    p.xz *= rot(p.y*(max(0., 4.-iTime*.5)));\n    p.xz *= rot(glitch*10.);\n    p.xz += vec2(sin(noise*9.12), cos(noise*8.123))*.5;\n    p.xz *= 1.+p.y*.3;\n\n    float m = length(p.xz) -.5;\n    float n =  sdRing(p.xz);\n    return max(m, -n);\n}\n\nfloat map(vec3 p) {\n    p.xz *= rot(iTime*.3);\n    return sdHorn(p);\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./200.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    float n = noise(vec3(1.,1.,s));\n    vec3 ro = vec3(0,-1.4,min(-10.+iTime*.5, -5.));\n    ro += vec3(cos(iTime*.2), 0., sin(iTime*.2));\n    vec3 lookat = ro + vec3(0., (sin(s*.2)+1.)*.1, 1.);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\n\nvoid main() {\n    vec3 col = vec3(0.);\n    vec2 uv = (gl_FragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    float s = iTime;\n    Camera c = makeCam(uv, s);\n    Trace t = trace(c.ro, c.rd);\n    float w = mix(.01,.02, sin(iTime)*.5+.5);\n    col = vec3(pow(t.s,1.2)*(1.+t.d*w));\n    gl_FragColor = vec4(col, 1.);\n}"}