{"body":"precision highp float;\n\nuniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define MIN_SURF 0.0001\n#define MAX_DIST 300.\n#define MAX_LOOP 1000\n#define PI 3.141593\n\nmat2 rot(float a) {\n  return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat random(float n) {\n    return fract(sin(n*318.154121)*31.134131);\n}\n\nvec3 makeRay(in vec3 ro, in vec3 lookat, in vec2 uv) {\n  float z = .5;\n  vec3 f = normalize(lookat-ro);\n  vec3 r = cross(vec3(0,1,0), f);\n  vec3 u = cross(f, r);\n  vec3 c = ro+f*z;\n  vec3 i = c+r*uv.x+u*uv.y;\n  vec3 rd = normalize(i-ro);\n  return rd;\n}\n\nfloat smin( float a, float b, float k ){\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI*2. / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\n// https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdRing(vec3 p, float d) {\n  vec3 tp = p;\n  tp.y = abs(tp.y);\n  tp.y -= d/30.;\n  float r = sdTorus(tp, vec2(d,d/150.));\n  vec3 pp = p;\n  pp.xz *= rot(p.y*.1);\n  pp.xz = pmod(pp.xz, 64.);\n  pp.z -= d;\n  float rp = length(pp.xz)-d/150.;\n  rp = max(tp.y, rp);\n  r = smin(r, rp, .1);\n  return r;\n}\n\nfloat map(vec3 p) {\n  p.xz *= rot(time);\n  p.xz *= rot(p.y*.1);\n  p.xy *= rot(p.z*.1);\n\n  float r = length(p+vec3(0,sin(time)*.5,0))-1.;\n  float d = 2.;\n  for(int i=0; i<=7; i++) {\n    float idx = floor(random(d)*5.);\n    d *= 1.5;\n    p.xz *= rot(time*.4);\n    float a = idx+2.;\n    p.yz = pmod(p.yz, a);\n    r = min(r, sdRing(p,d));\n  }\n  return r/5.;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)) - map(p + vec3( -d, 0.0, 0.0)),\n        map(p + vec3(0.0,   d, 0.0)) - map(p + vec3(0.0,  -d, 0.0)),\n        map(p + vec3(0.0, 0.0,   d)) - map(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main(void) {\n  vec2 uv = (gl_FragCoord.xy-.5*resolution.xy)/resolution.y;\n  float s = time*3.;\n  vec3 ro = vec3(10.,10.,-15.);\n  vec3 lookat = vec3(0);\n\n  // initialize\n  vec3 rd = makeRay(ro, lookat, uv);\n  vec3 col = vec3(0.);\n  float t = 0., stp=0.;\n  vec3 p;\n\n  // ray march\n  for(int i = 0; i <= MAX_LOOP; i++) {\n    p = ro+rd*t;\n    float d = map(p);\n    if(d>MAX_DIST) break;\n    if(d<MIN_SURF) {\n      vec3 n = getNormal(p);\n      n*=.5;\n      n+=.5;\n      col = vec3(1.);\n      col -= vec3(1.-n.y*.2);\n      break;\n    }\n    t += d;\n    stp+=1.;\n  }\n\n  float m = stp/150.;\n  float fog = pow(t/25., 4.);\n  col = mix(1.-col, vec3(1.), min(1., max(0., fog)));\n\n  gl_FragColor = vec4(col, 1.);\n}"}