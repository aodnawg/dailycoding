{"meta":{"day":null,"tag":null,"title":null},"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 1000\n#define MAX_DIST 10000.\n#define MIN_SURF .00001\n#define PI 3.141593\n\n\nfloat random(float n) { return fract(sin(n*217.12312)*398.2121561); }\nfloat random(vec2 p) { return fract(sin(dot(p, vec2(98.108171, 49.10821)))*81.20914); }\nfloat random(vec3 p) { return random(random(p.xy) + p.z); }\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2. + shift;\n\t\ta *= 0.5555;\n\t}\n\treturn v;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI*2. / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\nfloat sdGyroid(in vec3 p, in float z) {\n    return dot(sin(p*3.115*z), cos(p.zyx*3.12*z))/z*3.;\n}\n\nfloat map(vec3 p, vec3 ro, vec3 rd,  out vec3 cp) {\n    cp = vec3(0.);\n    float w = (sin(iTime)*.5+.5)*.5;\n    p.y *= 1.-w;\n    p.xz *= rot(p.y*sin(iTime)*10.);\n    // p.zy *= rot(p.y*sin(iTime)*20.);\n    float m = length(p)-1.;\n    // p *= 10.;\n    float z = 10.;\n    vec3 gp = p+vec3(iTime*1.);\n    float gl = pow(sin(iTime*.4)*.5+.5, 30.)*1.;\n\tfloat g = sdGyroid(gp, 2.*(1.+gl));\n    float shape = sdBox(p, vec3(.2))/3.;\n    float result = (shape-gl*.05)+g*.05+sdGyroid(gp, 3.)*.1;\n    return result/2.5;\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd, out vec3 cp) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p, ro, rd, cp);\n        // d = max(MIN_SURF+.0003+sin(iTime)*.00015, d);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./100.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    vec3 ro = vec3(0,0,-3);\n    // ro += vec3(0,0,0);\n    vec3 lookat = vec3(0.);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = 1.2;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\nvoid main() {\n    vec3 col = vec3(0.);\n    vec2 uv = (gl_FragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    float s = iTime;\n    Camera c = makeCam(uv, s);\n    vec3 cp;\n    Trace t = trace(c.ro, c.rd, cp);\n    vec3 p =  c.ro+c.rd*t.d;\n    float w = mix(.01,.02, sin(iTime)*.5+.5)*1.;\n    // vec3 wc = w*vec3(.3+sin(iTime),.21,.32+sin(t.d*.5-iTime*30.)*.3)*1.;\n    if(t.isHit) {\n        col = vec3(.2)+cos(iTime*4.)*.05;\n        float a = length(p-cp-vec3(sin(iTime)*.4, cos(iTime), 0.));\n        float b = length(p-cp-vec3(0., cos(iTime)*.2, sin(iTime*.1)));\n        float c = length(p-cp-vec3(cos(iTime)*.5, 0., sin(iTime*.4)));\n        col += vec3(.4,1.,.2)*a*.3;\n        col += vec3(.85,.3,1.)*b*.4;\n        col += vec3(.56,.63,.2)*c*.3;\n    } else {\n        col = vec3(.2)+vec3(mix(vec3(.98,.68,.58),vec3(.98,.57,.68), noise(vec3(uv.y+iTime*.3,sin(iTime),1.))));\n        \n    }\n    float v = pow(t.s,1.)*(t.d*w);\n    float l = .1 + noise(vec3(iTime))*.4;\n    col -= vec3(t.s*l);\n\n    // col = cp;\n    gl_FragColor = vec4(1.-col, 1.);\n}"}