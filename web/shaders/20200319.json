{"meta":{"day":null,"tag":null,"title":null},"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\nprecision highp float;\n\n\n#define LOOP_MAX 1000\n#define MAX_DIST 10000.\n#define MIN_SURF .00001\n#define PI 3.141593\n\nfloat random(float n) {\n    return fract(sin(n*217.12312)*398.2121561);\n}\n\nfloat random(vec2 p) {\n    return fract(\n        sin(dot(p, vec2(98.108171, 49.10821)))*81.20914\n    );\n}\n\nfloat random(vec3 p) {\n    return random(random(p.xy) + p.z);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sdGyroid(vec3 p, float r) {\n\tp += vec3(0.,0.,noise(vec3(iTime*r*2.,0.,0.)));\n\tfloat scale = 20.;\n\tfloat g = dot(sin(p*20.115), cos(p.zyx*14.12))/30.;\n\tfloat thick = mix(0.003, 0.03, r);\n\treturn abs(g)-thick;\n\n}\n\nfloat map(vec3 p, vec3 ro) {\n\tfloat z = 2.;\n\tvec3 p_ = mod(p, z)- z*.5;\n\tvec3 id = floor(p/z);\n\tfloat r = random(id);\n\tfloat s = length(p_)-.9+r;\n    float n = noise(vec3(1.,1., iTime*.2))*r*.4;\n\ts = abs(s)-.01-n;\n\tfloat g = sdGyroid(p_, r);\n\t\n\treturn max(p.y, max(s, g))/3.5;\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p, ro);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./200.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    vec3 ro = vec3(1.,2.,-2.+s);\n    vec3 lookat = ro+vec3(0.,-1.,1.8);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\nvoid main() {\n    vec3 col = vec3(0.);\n    vec2 uv = (gl_FragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    float s = iTime;\n    Camera c = makeCam(uv, s);\n    Trace t = trace(c.ro, c.rd);\n    float w = mix(.01,.02, sin(iTime)*.5+.5)*8.;\n    col = vec3(1.,.3,.1)*.4*vec3(pow(t.s,1.)*(1.+t.d*.1*w*(1.-vec3(.2,.1,.2))*.4));\n    gl_FragColor = vec4(1.-col, 1.);\n}"}