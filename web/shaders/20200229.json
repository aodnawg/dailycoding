{"meta":{"day":null,"tag":null,"title":null},"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 100\n#define MAX_DIST 100.\n#define MIN_SURF .00001\n#define PI 3.141593\n\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\nvec2 rhash(vec2 uv) {\n  uv *= myt;\n  uv *= mys;\n  return fract(fract(uv / mys) * uv);\n}\n\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      43758.5453);\n}\n\nvec3 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return vec3(sqrt(res), abs(id));\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * voronoi3d(x).x;\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nmat2 rot(float a) {\n    return mat2(\n        cos(a), sin(a), -sin(a), cos(a)\n    );\n}\n\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\nfloat random(float n) {\n    return fract(sin(n*217.12312)*398.2121561);\n}\n\nfloat random(vec2 p) {\n    return fract(\n        sin(dot(p, vec2(98.108171, 49.10821)))*81.20914\n    );\n}\n\nfloat random(vec3 p) {\n    return random(random(p.xy) + p.z);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 fold(vec3 p, float s) {\n    p = mod(p, 3.) -1.5;\n    float o = -.001;\n    p = abs(p);\n    p += vec3(o,0.,0.);\n    p.yz *= rot(s);\n    p = abs(p);\n    p += vec3(0.,o,0.);\n    p.xz *= rot(s);\n    p = abs(p);\n    p += vec3(0.,0., o);\n    p.xy *= rot(s);\n    return p;\n}\n\nfloat sdMonolith(vec3 p) {\n\n    // float s = .5;\n    // float b = sdBox(p, vec3(s));\n    // float r = .3;\n    // b = max(b, -sdBox(p, vec3(s+.1,r,r)));\n    // b = max(b, -sdBox(p, vec3(r,s+.1,r)));\n    // b = max(b, -sdBox(p, vec3(r,r,s+.1)));\n\n    // b = max(p.z, b);\n\n\n    p.xz *= rot(p.y*.04);\n    float z = .5;\n    vec2 uv = p.xz;\n    uv.y += iTime;\n    vec2 gv = fract(uv*z)-.5;\n    vec2 id = floor(uv*z);\n    gv += sin(random(id))*.1;\n    gv += cos(random(random(id)))*.1;\n    float r = mix(-1.,1.,random(id))*0.05;\n    float b = length(gv) - r*sin((iTime+random(id)));\n\n\n\n    return b;\n}\n\nfloat sdSea(vec3 p) {\n    float h = fbm(p*.7+fbm(vec3(p.xy, p.z+iTime)))*.7;\n    return max(p.y+h+.5, p.z-10.);\n}\n\nfloat map(vec3 p) {    \n\n    float torus = sdTorus(p, vec2(.5, .1));\n    float monolith = sdMonolith(p);\n    float sea = sdSea(p);\n\n    float glitch = mix(-1., 0., floor(random(iTime*2.)))*50.;\n    glitch *= step(.7, random(floor(iTime*2.)));\n    float m = smin(sea, monolith, 20.+glitch);\n    m = max(-p.z-4., m);\n    return m;\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        // d = max(abs(MIN_SURF+0.001), d);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./100.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    vec3 ro = vec3(0,0,-3);\n    // ro += noise(vec3(uv, s))*.01;\n    // ro = vec3(cos(s),0,sin(s))*3.;\n    vec3 lookat = vec3(0,-.5,0);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        sdSea(p + vec3(  d, 0.0, 0.0)) - sdSea(p + vec3( -d, 0.0, 0.0)),\n        sdSea(p + vec3(0.0,   d, 0.0)) - sdSea(p + vec3(0.0,  -d, 0.0)),\n        sdSea(p + vec3(0.0, 0.0,   d)) - sdSea(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nfloat makeStar(in vec2 uv, float z) {\n    vec2 sUv = uv;\n    float sz = z;\n    vec2 gsUv = fract(sUv*sz)-.5;\n    vec2 isUv = floor(sUv*sz);\n    gsUv.x += sin(random(isUv)*PI*2.)*.4;\n    gsUv.y += sin(random(random(isUv))*PI*2.)*.4;\n    // gsUv.y += sin(random(random(isUv)));\n    float star = clamp(1.-length(gsUv*5.), 0., 1.);\n    star = pow(star, 20.+sin(iTime*2.+random(isUv)*87.124)*10.);\n    return star;\n}\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy-iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0.);\n\n\n    float s = iTime;\n    Camera cam = makeCam(uv, s);\n    Trace t_ = trace(cam.ro, cam.rd);\n\n    vec3 tp = cam.ro+cam.rd*t_.d;\n\n    // col = tn;\n\n    float m = t_.s;\n    col += vec3(m);\n\n\n    gl_FragColor = vec4(col, 1.);\n}"}