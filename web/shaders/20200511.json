{"meta":{"day":"79","tag":["raymarching","digitalart","glsl","shader","creativecoding","cgi","generativeart"],"title":"Factory 2"},"body":"// @day 79\n// @title Factory 2\n// @tag raymarching,digitalart,glsl,shader,creativecoding,cgi,generativeart\n\nprecision highp float;\n\nuniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n\n#define MIN_SURF 0.0001\n#define MAX_DIST 100.\n#define MAX_LOOP 1000\n#define PI 3.141593\n\nmat2 rot(float a) {\n  return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat random(float n) {\n    return fract(sin(n*318.154121)*31.134131);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvec3 makeRay(in vec3 ro, in vec3 lookat, in vec2 uv) {\n  float z = 1.;\n  vec3 f = normalize(lookat-ro);\n  vec3 r = cross(vec3(0,1,0), f);\n  vec3 u = cross(f, r);\n  vec3 c = ro+f*z;\n  vec3 i = c+r*uv.x+u*uv.y;\n  vec3 rd = normalize(i-ro);\n  return rd;\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI*2. / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\n// @refs https://iquilezles.org/www/articles/smin/smin.htm\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat map(vec3 p) {\n  p.xz *= rot(time*.1);\n\n  p.xz = mod(p.xz-10., 20.)-10.;\n  p.xz *= rot(length(p.xz*sin(time)));\n\n  float tnoise = noise(vec3(time*2.));\n  float n = 3. + 7.*tnoise;\n  p.xy *= rot(sin(time));\n  p.xz = pmod(p.xz, n);\n  p.xz *= rot(sin(time));\n  p.z -= tnoise+1.;\n  p.xy = pmod(p.xy, n*tnoise);\n  p.y -= tnoise*1.;\n  p.yz = pmod(p.yz, n);\n  p.z -= 1.;\n\n  float result = sdBox(p, vec3(2., 2., 2.));\n  vec3 hp = p;\n  float z = .1+tnoise*.2;\n  hp = mod(hp-z*.5,z)-z*.5;\n  float v = 1./30.;\n  float holl = min(\n    sdBox(hp, vec3(1.1, v, v)),\n    min(\n      sdBox(hp, vec3(v, v, 1.1)),\n      sdBox(hp, vec3(v, 1.1, v))\n    )\n  );\n\n  result = max(result, -holl);\n  return result/3.;\n}\n\nvoid main(void) {\n  vec2 uv = (gl_FragCoord.xy-.5*resolution.xy)/resolution.y;\n  vec3 ro = vec3(0., 10., -20.);\n  vec3 lookat = vec3(0, 0., 0.);\n\n  // initialize\n  vec3 rd = makeRay(ro, lookat, uv);\n  vec3 col = vec3(0.);\n  float t = 0.;\n  vec3 p;\n\n  // ray march\n  float step=0.;\n  for(int i = 0; i <= MAX_LOOP; i++) {\n    p = ro+rd*t;\n    float d = map(p);\n    if(d>MAX_DIST || d<MIN_SURF) {\n      break;\n    }\n    step += 1.;\n    t += d;\n  }\n\n  float fog = t/90.;\n  fog = pow(fog, 1.2);\n\n  col = vec3(step/300.);\n  col = pow(col, vec3(2.));\n\n  col = mix(col, vec3(1.), min(1., fog));\n  gl_FragColor = vec4(col, 1.);\n}\n"}