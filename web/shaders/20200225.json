{"meta":{"day":null,"tag":null,"title":null},"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 1000\n#define MAX_DIST 1000.\n#define MIN_SURF .0001\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n////////////////////////\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    vec3 ro = vec3(0,0,-3);\n    ro = vec3(cos(s),0,sin(s))*3.;\n    vec3 lookat = vec3(0);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\n\n\n////////////////////////\n\nfloat sdNoise(vec3 p) {\n    p *= 1.;\n    p.z += iTime;\n    float n = fbm(p + fbm(vec3(p.xy, p.z + iTime)));\n    return pow(length(n)-.3, 1.0);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p) {\n    float n = sdNoise(p);\n    // return length(p)-1.;\n\n    float m = length(p)-5.;\n    return max(n,m);\n}\n\n// float mapS(vec3 p) {\n//     float r=.5;\n//     r *= 1.+fbm(p*.2)*5.;\n//     float s = length(p)-r;\n//     return s;\n// }\n\nfloat mapS(vec3 p) {\n    float r=.5;\n    r *= 1.+fbm(p*.2 + fbm(vec3(p.xy, iTime*2.))*.3)*5.;\n    float s = length(p)-r*.7;\n    return s;\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        d = max(abs(MIN_SURF+0.001), d);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./1000.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nTrace sTrace(vec3 ro, vec3 rd) {\n    Trace mr;\n\n    float t = 0.;\n    float s = 0.;\n\n    bool flag;\n    for(int i=0; i<100; i++) {\n        vec3 p = ro+rd*t;\n        float d = mapS(p);\n\n        if(d<0.001) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./100.;\n\n    }\n    mr.d = t;\n    mr.s = s;\n    return mr;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)) - map(p + vec3( -d, 0.0, 0.0)),\n        map(p + vec3(0.0,   d, 0.0)) - map(p + vec3(0.0,  -d, 0.0)),\n        map(p + vec3(0.0, 0.0,   d)) - map(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvec3 getSNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        mapS(p + vec3(  d, 0.0, 0.0)) - mapS(p + vec3( -d, 0.0, 0.0)),\n        mapS(p + vec3(0.0,   d, 0.0)) - mapS(p + vec3(0.0,  -d, 0.0)),\n        mapS(p + vec3(0.0, 0.0,   d)) - mapS(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    float s = iTime * .1;\n\n    Camera cam = makeCam(uv, s);\n    Trace trace_ = trace(cam.ro, cam.rd); \n\n    // vec3 n;\n    // if(trace_.isHit) n = getNormal(cam.ro+cam.rd*trace_.d);\n    // col = n;\n\n    Trace sd = sTrace(cam.ro, cam.rd);\n    vec3 sp = cam.ro+cam.rd*sd.d;\n    vec3 spN = getSNormal(sp);\n    if (sd.d<MAX_DIST) {\n        col = spN;\n        Trace t_ = trace(sp, spN);\n        col = vec3(t_.s);\n        col += vec3(sd.s)*.2;\n    }\n\n    col += vec3(trace(cam.ro, cam.rd).s)*.1;\n\n    gl_FragColor = vec4(col, 1.);\n}\n"}