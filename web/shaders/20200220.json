{"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 6; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid makeRoRd(in vec2 uv, out vec3 ro, out vec3 rd) {\n    ro = vec3(0,0,-5);\n    vec2 mou = (iMouse.xy/iResolution.xy-.5) * 10.;\n    vec3 lookat = vec3(mou,0);\n    vec3 f = normalize(lookat-ro);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    vec3 i = c + uv.x * r + uv.y * u;\n    rd = normalize(i-ro);\n}\n\nmat2 rot (float a) {\n    return mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n    );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdNoise(vec3 p) {\n    float wave = sin(iTime)*.05;\n    float d2 = fbm(p)-.15 + wave;\n    float t = 10.;\n    float r = .3;\n    return length(max(vec2(d2,abs(p.y)-t),0.0))-r;\n}\n\nfloat getDist(in vec3 p) {\n    p.xz *= rot(iTime*.3);\n    float z = 10.*fract(sin(floor(iTime*.5)*98.1314)*121.1212101);\n    float n = sdNoise((p+vec3(iTime*.1,0.,0.))*(2.+sin(z)));\n    float d = max(n, sdSphere(p, 1.5));\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        getDist(p + vec3(  d, 0.0, 0.0)) - getDist(p + vec3( -d, 0.0, 0.0)),\n        getDist(p + vec3(0.0,   d, 0.0)) - getDist(p + vec3(0.0,  -d, 0.0)),\n        getDist(p + vec3(0.0, 0.0,   d)) - getDist(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid march(out vec3 hitPos, out float step, in vec3 ro, in vec3 rd) {\n    float t=0.;\n    for(int i=0; i<=3500; i++) {\n        vec3 p = ro+rd*t;\n        float dS = getDist(p);\n        dS = max(0.0002, abs(dS));\n        if(dS<0.0000001) {\n            hitPos = p;\n            break;\n        }\n        if(t>1000.) break;\n        t += dS;\n        step += 1./400.;\n    }\n}\n\nvoid main()\n{\n    vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(1.);\n\n    vec3 ro,rd;\n    makeRoRd(uv, ro, rd);\n    col = rd;\n\n    float t=0., step=0.;\n    vec3 hitPos;\n    march(hitPos, step, ro, rd);\n\n    float m = pow(step, 2.);\n    col = vec3(m);\n    \n    gl_FragColor = vec4(col,1.0);\n}"}