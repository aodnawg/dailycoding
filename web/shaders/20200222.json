{"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define MAX_MARCH_LOOP 100000\n#define MIN_SURF 0.000001\n#define MAX_DIST 10000.\n\nprecision highp float;\n\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\nvec2 rhash(vec2 uv) {\n  uv *= myt;\n  uv *= mys;\n  return fract(fract(uv / mys) * uv);\n}\n\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      43758.5453);\n}\n\nvec3 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return vec3(sqrt(res), abs(id));\n}\n\nfloat random(in vec2 p) {\n    return fract(sin(dot(p, vec2(13.12918, 54.12928))*12414.1214)*3857.100291);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * voronoi3d(x).x;\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid makeRoRd(out vec3 ro, out vec3 rd, in vec2 uv) {\n    ro = vec3(0,-15,-3.4);\n    \n    vec2 mouse = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 lookat = vec3(mouse*10.,0);\n    lookat = vec3(0, -5, 0);\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0),f);\n    float z = 1.;\n    vec3 u = cross(f,r);\n    vec3 c = ro+f*z;\n    vec3 i = c + uv.x*r + uv.y*u;\n    rd = normalize(i-ro);\n}\n\nmat2 rot (float a) {\n    return mat2(\n        sin(a), cos(a), -sin(a), cos(a)\n    );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p) {\n    return length(p-vec3(0))-1.; \n}\n\nfloat sdNoise(vec3 p) {\n    // p.xz *= rot(p.y);\n    float wave = sin(iTime)*.05;\n    //p.xz *= rot(iTime);\n    vec3 p_ = p;\n\n    p_ += iTime*.3;\n    float d2 = fbm(p_)-.2;\n    float t = 10.;\n    float r = .3;\n    return length(max(vec2(d2,abs(p.y)-t),0.0))-r;\n}\n\nfloat getDist(vec3 p) {\n    // p.xz *= rot(iTime);\n\n    float n = sdNoise(p*.5);\n    p *= 1.+n*.2;\n    float s = sdBox(p, vec3(1.8, 1000.,2.5));\n    // s *= n;\n    // return (s,max(n, s));\n    return s;\n}\n\nvoid march(out vec3 hitPos, out float steps, in vec3 ro, in vec3 rd) {\n    float t;\n    vec3 p;\n    for(int i=0; i <= MAX_MARCH_LOOP; i++) {\n        p = ro+t*rd;\n        float distance = getDist(p);\n        distance = max(0.001, abs(distance));\n        if(distance < MIN_SURF || distance > MAX_DIST) {\n            break;\n        }\n        t += distance;\n        steps += 1.; \n    }\n    hitPos = p;\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = getDist(p);\n    vec2 e = vec2(.0001, 0);\n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx));\n    return normalize(n);\n}\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy - .5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n\n    vec3 ro, rd;\n    makeRoRd(ro, rd, uv);\n\n    vec3 hitPos;\n    float steps;\n    march(hitPos, steps, ro, rd);\n\n    vec3 n = getNormal(hitPos);\n\n    // col = length(hitPos) < 1000. ? vec3(1,0,0) : vec3(0);\n    float w = sin(iTime) * .25;\n    col += pow(steps/600.,2.3+w);\n    // col = n;\n\n\n    vec3 f = (hitPos-ro);\n    vec3 r = f+2.*n;\n    vec3 lightPos = vec3(sin(iTime)*5.,5,cos(iTime)*5.); \n    // float s = clamp(0.,1.,dot(r, lightPos));\n    // float def = clamp(0.,1.,dot(n, lightPos));\n    // col += vec3(s)*.1+vec3(def)*.1;\n\n    gl_FragColor = vec4(col, 1.);\n}"}