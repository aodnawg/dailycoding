{"body":"uniform vec2 resolution;\nuniform float time;\nuniform vec2 mouse;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n\n#define LOOP_MAX 1000\n#define MAX_DIST 1000.\n#define MIN_SURF .0001\n#define PI 3.141593\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 7; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nmat2 rot(float a) {\n    return mat2(\n        cos(a), sin(a), -sin(a), cos(a)\n    );\n}\n\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\nfloat random(float n) {\n    return fract(sin(n*217.12312)*398.2121561);\n}\n\nfloat random(vec2 p) {\n    return fract(\n        sin(dot(p, vec2(98.108171, 49.10821)))*81.20914\n    );\n}\n\nfloat random(vec3 p) {\n    return random(random(p.xy) + p.z);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdMonolith(vec3 p) {\n    // p = mod(p, 2.)-1.;\n    p.xz *= rot(-10.);\n    float glitch = step(.7, random(floor(iTime*4.)));\n    float n = mix(-.1,.1,fbm(p + vec3(p.xz*rot(iTime), p.y)))*glitch;\n    // n *= step(.5, random(floor(p.xy*4.)));\n    // p.x += (-.1, .1, step(.7, random(floor(p.y*10.))));\n    float s = .1 + n;\n    float b = sdBox(p, vec3(4,9,1)*s);\n    b = abs(b)-.001;\n\n    return b;\n}\n\nfloat sdSea(vec3 p) {\n    float h = noise(p*.7)*.7;\n    return max(p.y+h+.5, p.z-10.);\n}\n\nfloat map(vec3 p) {\n    float torus = sdTorus(p, vec2(.5, .1));\n    float monolith = sdMonolith(p);\n    float sea = sdSea(p);\n\n    float m = min(sea, monolith);\n    return m;\n}\n\nstruct Trace {\n    float d; bool isHit; float s;\n};\nTrace trace(vec3 ro, vec3 rd) {\n    Trace mr;\n    float t = 0.;\n    float s = 0.;\n    bool flag;\n    for(int i=0; i<LOOP_MAX; i++) {\n        vec3 p = ro+rd*t;\n        float d = map(p);\n        // d = max(abs(MIN_SURF+0.001), d);\n        if(d<MIN_SURF) {\n            flag=true;\n            break;\n        }\n        if(t>MAX_DIST) {\n            break;\n        }\n        flag=false;\n        t += d;\n        s += 1./100.;\n    }\n    mr.d = t;\n    mr.s = s;\n    mr.isHit = flag;\n    return mr;\n}\n\nstruct Camera {\n    vec3 ro; vec3 rd; float z;\n};\nCamera makeCam(in vec2 uv, float s) {\n    Camera camera;\n    vec3 ro = vec3(0,0,-3);\n    // ro += noise(vec3(uv, s))*.01;\n    // ro = vec3(cos(s),0,sin(s))*3.;\n    vec3 lookat = vec3(0,0,0);\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 i = c+r*uv.x+u*uv.y;\n    vec3 rd = normalize(i-ro);\n\n    camera.ro = ro;\n    camera.rd = rd;\n    camera.z = z;\n    return camera;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        sdSea(p + vec3(  d, 0.0, 0.0)) - sdSea(p + vec3( -d, 0.0, 0.0)),\n        sdSea(p + vec3(0.0,   d, 0.0)) - sdSea(p + vec3(0.0,  -d, 0.0)),\n        sdSea(p + vec3(0.0, 0.0,   d)) - sdSea(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nfloat makeStar(in vec2 uv, float z) {\n    vec2 sUv = uv;\n    float sz = z;\n    vec2 gsUv = fract(sUv*sz)-.5;\n    vec2 isUv = floor(sUv*sz);\n    gsUv.x += sin(random(isUv)*PI*2.)*.4;\n    gsUv.y += sin(random(random(isUv))*PI*2.)*.4;\n    // gsUv.y += sin(random(random(isUv)));\n    float star = clamp(1.-length(gsUv*5.), 0., 1.);\n    star = pow(star, 20.+sin(iTime*2.+random(isUv)*87.124)*10.);\n    return star;\n}\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy-iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0.);\n\n\n    float s = iTime;\n    Camera cam = makeCam(uv, s);\n    Trace t_ = trace(cam.ro, cam.rd);\n\n    vec3 tp = cam.ro+cam.rd*t_.d;\n    vec3 tn = getNormal(tp);\n    Trace ref = trace(tp, tn);\n\n    // col = tn;\n\n    if(ref.isHit) {\n        col = vec3(ref.s)*10.;\n        col = vec3(0);\n    }\n\n    float m = t_.s;\n    col += vec3(m);\n\n    // sky\n    float z = 25.;\n    float star = 0.;\n    vec2 shift = vec2(200.);\n    for (int i=0; i<=8; i++) {\n        star += makeStar(uv+shift, z);\n        z *= 1.5;\n    }\n\n    if(!t_.isHit) {\n        col = vec3(pow(1.-uv.y-.3, 1.5 + sin(iTime)*.1));\n        col += vec3(clamp(0.,1.,star))*(uv.y+.3);\n    }\n\n    // col = vec3(max(0., clamp(0.,1.,star)));\n\n\n    gl_FragColor = vec4(col, 1.);\n}"}